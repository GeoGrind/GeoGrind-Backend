// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.GetAllChatRoomsResponse in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

public class GetAllChatRoomsResponse(
  chatRooms: List<ChatRoom> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<GetAllChatRoomsResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "io.grpc.kotlin.generator.ChatRoom#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val chatRooms: List<ChatRoom> = immutableCopyOf("chatRooms", chatRooms)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is GetAllChatRoomsResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (chatRooms != other.chatRooms) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + chatRooms.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (chatRooms.isNotEmpty()) result += """chatRooms=$chatRooms"""
    return result.joinToString(prefix = "GetAllChatRoomsResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(chatRooms: List<ChatRoom> = this.chatRooms, unknownFields: ByteString =
      this.unknownFields): GetAllChatRoomsResponse = GetAllChatRoomsResponse(chatRooms,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<GetAllChatRoomsResponse> = object :
        ProtoAdapter<GetAllChatRoomsResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      GetAllChatRoomsResponse::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.GetAllChatRoomsResponse", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: GetAllChatRoomsResponse): Int {
        var size = value.unknownFields.size
        size += ChatRoom.ADAPTER.asRepeated().encodedSizeWithTag(1, value.chatRooms)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: GetAllChatRoomsResponse) {
        ChatRoom.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.chatRooms)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: GetAllChatRoomsResponse) {
        writer.writeBytes(value.unknownFields)
        ChatRoom.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.chatRooms)
      }

      override fun decode(reader: ProtoReader): GetAllChatRoomsResponse {
        val chatRooms = mutableListOf<ChatRoom>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> chatRooms.add(ChatRoom.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return GetAllChatRoomsResponse(
          chatRooms = chatRooms,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: GetAllChatRoomsResponse): GetAllChatRoomsResponse = value.copy(
        chatRooms = value.chatRooms.redactElements(ChatRoom.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
