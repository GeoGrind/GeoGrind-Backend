// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.UserProfile in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

public class UserProfile(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val profileId: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val profileImage: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val username: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val emoji: String = "",
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val program: String = "",
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val yearOfGrad: Int = 0,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val university: String = "",
  @field:WireField(
    tag = 8,
    adapter = "io.grpc.kotlin.generator.UserAccount#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val userAccount: UserAccount? = null,
  course: List<Courses> = emptyList(),
  @field:WireField(
    tag = 10,
    adapter = "io.grpc.kotlin.generator.ChatRoom#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 9,
  )
  public val chatroom: ChatRoom? = null,
  @field:WireField(
    tag = 11,
    adapter = "io.grpc.kotlin.generator.Sessions#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 10,
  )
  public val sessions: Sessions? = null,
  @field:WireField(
    tag = 12,
    adapter = "io.grpc.kotlin.generator.Messages#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 11,
  )
  public val messageSender: Messages? = null,
  messageRead: List<Messages> = emptyList(),
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 13,
  )
  public val createdAt: String = "",
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 14,
  )
  public val updatedAt: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<UserProfile, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 9,
    adapter = "io.grpc.kotlin.generator.Courses#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 8,
  )
  public val course: List<Courses> = immutableCopyOf("course", course)

  @field:WireField(
    tag = 13,
    adapter = "io.grpc.kotlin.generator.Messages#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 12,
  )
  public val messageRead: List<Messages> = immutableCopyOf("messageRead", messageRead)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is UserProfile) return false
    if (unknownFields != other.unknownFields) return false
    if (profileId != other.profileId) return false
    if (profileImage != other.profileImage) return false
    if (username != other.username) return false
    if (emoji != other.emoji) return false
    if (program != other.program) return false
    if (yearOfGrad != other.yearOfGrad) return false
    if (university != other.university) return false
    if (userAccount != other.userAccount) return false
    if (course != other.course) return false
    if (chatroom != other.chatroom) return false
    if (sessions != other.sessions) return false
    if (messageSender != other.messageSender) return false
    if (messageRead != other.messageRead) return false
    if (createdAt != other.createdAt) return false
    if (updatedAt != other.updatedAt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + profileId.hashCode()
      result = result * 37 + profileImage.hashCode()
      result = result * 37 + username.hashCode()
      result = result * 37 + emoji.hashCode()
      result = result * 37 + program.hashCode()
      result = result * 37 + yearOfGrad.hashCode()
      result = result * 37 + university.hashCode()
      result = result * 37 + (userAccount?.hashCode() ?: 0)
      result = result * 37 + course.hashCode()
      result = result * 37 + (chatroom?.hashCode() ?: 0)
      result = result * 37 + (sessions?.hashCode() ?: 0)
      result = result * 37 + (messageSender?.hashCode() ?: 0)
      result = result * 37 + messageRead.hashCode()
      result = result * 37 + createdAt.hashCode()
      result = result * 37 + updatedAt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """profileId=${sanitize(profileId)}"""
    result += """profileImage=${sanitize(profileImage)}"""
    result += """username=${sanitize(username)}"""
    result += """emoji=${sanitize(emoji)}"""
    result += """program=${sanitize(program)}"""
    result += """yearOfGrad=$yearOfGrad"""
    result += """university=${sanitize(university)}"""
    if (userAccount != null) result += """userAccount=$userAccount"""
    if (course.isNotEmpty()) result += """course=$course"""
    if (chatroom != null) result += """chatroom=$chatroom"""
    if (sessions != null) result += """sessions=$sessions"""
    if (messageSender != null) result += """messageSender=$messageSender"""
    if (messageRead.isNotEmpty()) result += """messageRead=$messageRead"""
    result += """createdAt=${sanitize(createdAt)}"""
    result += """updatedAt=${sanitize(updatedAt)}"""
    return result.joinToString(prefix = "UserProfile{", separator = ", ", postfix = "}")
  }

  public fun copy(
    profileId: String = this.profileId,
    profileImage: String = this.profileImage,
    username: String = this.username,
    emoji: String = this.emoji,
    program: String = this.program,
    yearOfGrad: Int = this.yearOfGrad,
    university: String = this.university,
    userAccount: UserAccount? = this.userAccount,
    course: List<Courses> = this.course,
    chatroom: ChatRoom? = this.chatroom,
    sessions: Sessions? = this.sessions,
    messageSender: Messages? = this.messageSender,
    messageRead: List<Messages> = this.messageRead,
    createdAt: String = this.createdAt,
    updatedAt: String = this.updatedAt,
    unknownFields: ByteString = this.unknownFields,
  ): UserProfile = UserProfile(profileId, profileImage, username, emoji, program, yearOfGrad,
      university, userAccount, course, chatroom, sessions, messageSender, messageRead, createdAt,
      updatedAt, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<UserProfile> = object : ProtoAdapter<UserProfile>(
      FieldEncoding.LENGTH_DELIMITED, 
      UserProfile::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.UserProfile", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: UserProfile): Int {
        var size = value.unknownFields.size
        if (value.profileId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.profileId)
        if (value.profileImage != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.profileImage)
        if (value.username != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.username)
        if (value.emoji != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.emoji)
        if (value.program != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.program)
        if (value.yearOfGrad != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(6,
            value.yearOfGrad)
        if (value.university != "") size += ProtoAdapter.STRING.encodedSizeWithTag(7,
            value.university)
        if (value.userAccount != null) size += UserAccount.ADAPTER.encodedSizeWithTag(8,
            value.userAccount)
        size += Courses.ADAPTER.asRepeated().encodedSizeWithTag(9, value.course)
        if (value.chatroom != null) size += ChatRoom.ADAPTER.encodedSizeWithTag(10, value.chatroom)
        if (value.sessions != null) size += Sessions.ADAPTER.encodedSizeWithTag(11, value.sessions)
        if (value.messageSender != null) size += Messages.ADAPTER.encodedSizeWithTag(12,
            value.messageSender)
        size += Messages.ADAPTER.asRepeated().encodedSizeWithTag(13, value.messageRead)
        if (value.createdAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(14,
            value.createdAt)
        if (value.updatedAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(15,
            value.updatedAt)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: UserProfile) {
        if (value.profileId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.profileId)
        if (value.profileImage != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.profileImage)
        if (value.username != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.username)
        if (value.emoji != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.emoji)
        if (value.program != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.program)
        if (value.yearOfGrad != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.yearOfGrad)
        if (value.university != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.university)
        if (value.userAccount != null) UserAccount.ADAPTER.encodeWithTag(writer, 8,
            value.userAccount)
        Courses.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.course)
        if (value.chatroom != null) ChatRoom.ADAPTER.encodeWithTag(writer, 10, value.chatroom)
        if (value.sessions != null) Sessions.ADAPTER.encodeWithTag(writer, 11, value.sessions)
        if (value.messageSender != null) Messages.ADAPTER.encodeWithTag(writer, 12,
            value.messageSender)
        Messages.ADAPTER.asRepeated().encodeWithTag(writer, 13, value.messageRead)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 14, value.createdAt)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 15, value.updatedAt)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: UserProfile) {
        writer.writeBytes(value.unknownFields)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 15, value.updatedAt)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 14, value.createdAt)
        Messages.ADAPTER.asRepeated().encodeWithTag(writer, 13, value.messageRead)
        if (value.messageSender != null) Messages.ADAPTER.encodeWithTag(writer, 12,
            value.messageSender)
        if (value.sessions != null) Sessions.ADAPTER.encodeWithTag(writer, 11, value.sessions)
        if (value.chatroom != null) ChatRoom.ADAPTER.encodeWithTag(writer, 10, value.chatroom)
        Courses.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.course)
        if (value.userAccount != null) UserAccount.ADAPTER.encodeWithTag(writer, 8,
            value.userAccount)
        if (value.university != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.university)
        if (value.yearOfGrad != 0) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.yearOfGrad)
        if (value.program != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.program)
        if (value.emoji != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.emoji)
        if (value.username != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.username)
        if (value.profileImage != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.profileImage)
        if (value.profileId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.profileId)
      }

      override fun decode(reader: ProtoReader): UserProfile {
        var profileId: String = ""
        var profileImage: String = ""
        var username: String = ""
        var emoji: String = ""
        var program: String = ""
        var yearOfGrad: Int = 0
        var university: String = ""
        var userAccount: UserAccount? = null
        val course = mutableListOf<Courses>()
        var chatroom: ChatRoom? = null
        var sessions: Sessions? = null
        var messageSender: Messages? = null
        val messageRead = mutableListOf<Messages>()
        var createdAt: String = ""
        var updatedAt: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> profileId = ProtoAdapter.STRING.decode(reader)
            2 -> profileImage = ProtoAdapter.STRING.decode(reader)
            3 -> username = ProtoAdapter.STRING.decode(reader)
            4 -> emoji = ProtoAdapter.STRING.decode(reader)
            5 -> program = ProtoAdapter.STRING.decode(reader)
            6 -> yearOfGrad = ProtoAdapter.INT32.decode(reader)
            7 -> university = ProtoAdapter.STRING.decode(reader)
            8 -> userAccount = UserAccount.ADAPTER.decode(reader)
            9 -> course.add(Courses.ADAPTER.decode(reader))
            10 -> chatroom = ChatRoom.ADAPTER.decode(reader)
            11 -> sessions = Sessions.ADAPTER.decode(reader)
            12 -> messageSender = Messages.ADAPTER.decode(reader)
            13 -> messageRead.add(Messages.ADAPTER.decode(reader))
            14 -> createdAt = ProtoAdapter.STRING.decode(reader)
            15 -> updatedAt = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return UserProfile(
          profileId = profileId,
          profileImage = profileImage,
          username = username,
          emoji = emoji,
          program = program,
          yearOfGrad = yearOfGrad,
          university = university,
          userAccount = userAccount,
          course = course,
          chatroom = chatroom,
          sessions = sessions,
          messageSender = messageSender,
          messageRead = messageRead,
          createdAt = createdAt,
          updatedAt = updatedAt,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: UserProfile): UserProfile = value.copy(
        userAccount = value.userAccount?.let(UserAccount.ADAPTER::redact),
        course = value.course.redactElements(Courses.ADAPTER),
        chatroom = value.chatroom?.let(ChatRoom.ADAPTER::redact),
        sessions = value.sessions?.let(Sessions.ADAPTER::redact),
        messageSender = value.messageSender?.let(Messages.ADAPTER::redact),
        messageRead = value.messageRead.redactElements(Messages.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
