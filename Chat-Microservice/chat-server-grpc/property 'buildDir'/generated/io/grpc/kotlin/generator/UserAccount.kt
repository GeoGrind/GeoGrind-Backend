// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.UserAccount in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

public class UserAccount(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val accountId: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val email: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val username: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val hashedPassword: String = "",
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val accountVerified: Boolean = false,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val tempToken: String = "",
  permissions: List<Permissions> = emptyList(),
  @field:WireField(
    tag = 8,
    adapter = "io.grpc.kotlin.generator.UserProfile#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val userProfile: UserProfile? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 8,
  )
  public val createdAt: String = "",
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 9,
  )
  public val updatedAt: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<UserAccount, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 7,
    adapter = "io.grpc.kotlin.generator.Permissions#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 6,
  )
  public val permissions: List<Permissions> = immutableCopyOf("permissions", permissions)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is UserAccount) return false
    if (unknownFields != other.unknownFields) return false
    if (accountId != other.accountId) return false
    if (email != other.email) return false
    if (username != other.username) return false
    if (hashedPassword != other.hashedPassword) return false
    if (accountVerified != other.accountVerified) return false
    if (tempToken != other.tempToken) return false
    if (permissions != other.permissions) return false
    if (userProfile != other.userProfile) return false
    if (createdAt != other.createdAt) return false
    if (updatedAt != other.updatedAt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + accountId.hashCode()
      result = result * 37 + email.hashCode()
      result = result * 37 + username.hashCode()
      result = result * 37 + hashedPassword.hashCode()
      result = result * 37 + accountVerified.hashCode()
      result = result * 37 + tempToken.hashCode()
      result = result * 37 + permissions.hashCode()
      result = result * 37 + (userProfile?.hashCode() ?: 0)
      result = result * 37 + createdAt.hashCode()
      result = result * 37 + updatedAt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """accountId=${sanitize(accountId)}"""
    result += """email=${sanitize(email)}"""
    result += """username=${sanitize(username)}"""
    result += """hashedPassword=${sanitize(hashedPassword)}"""
    result += """accountVerified=$accountVerified"""
    result += """tempToken=${sanitize(tempToken)}"""
    if (permissions.isNotEmpty()) result += """permissions=$permissions"""
    if (userProfile != null) result += """userProfile=$userProfile"""
    result += """createdAt=${sanitize(createdAt)}"""
    result += """updatedAt=${sanitize(updatedAt)}"""
    return result.joinToString(prefix = "UserAccount{", separator = ", ", postfix = "}")
  }

  public fun copy(
    accountId: String = this.accountId,
    email: String = this.email,
    username: String = this.username,
    hashedPassword: String = this.hashedPassword,
    accountVerified: Boolean = this.accountVerified,
    tempToken: String = this.tempToken,
    permissions: List<Permissions> = this.permissions,
    userProfile: UserProfile? = this.userProfile,
    createdAt: String = this.createdAt,
    updatedAt: String = this.updatedAt,
    unknownFields: ByteString = this.unknownFields,
  ): UserAccount = UserAccount(accountId, email, username, hashedPassword, accountVerified,
      tempToken, permissions, userProfile, createdAt, updatedAt, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<UserAccount> = object : ProtoAdapter<UserAccount>(
      FieldEncoding.LENGTH_DELIMITED, 
      UserAccount::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.UserAccount", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: UserAccount): Int {
        var size = value.unknownFields.size
        if (value.accountId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.accountId)
        if (value.email != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.email)
        if (value.username != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.username)
        if (value.hashedPassword != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.hashedPassword)
        if (value.accountVerified != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(5,
            value.accountVerified)
        if (value.tempToken != "") size += ProtoAdapter.STRING.encodedSizeWithTag(6,
            value.tempToken)
        size += Permissions.ADAPTER.asRepeated().encodedSizeWithTag(7, value.permissions)
        if (value.userProfile != null) size += UserProfile.ADAPTER.encodedSizeWithTag(8,
            value.userProfile)
        if (value.createdAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(9,
            value.createdAt)
        if (value.updatedAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(10,
            value.updatedAt)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: UserAccount) {
        if (value.accountId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.accountId)
        if (value.email != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.email)
        if (value.username != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.username)
        if (value.hashedPassword != "") ProtoAdapter.STRING.encodeWithTag(writer, 4,
            value.hashedPassword)
        if (value.accountVerified != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5,
            value.accountVerified)
        if (value.tempToken != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.tempToken)
        Permissions.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.permissions)
        if (value.userProfile != null) UserProfile.ADAPTER.encodeWithTag(writer, 8,
            value.userProfile)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.createdAt)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 10, value.updatedAt)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: UserAccount) {
        writer.writeBytes(value.unknownFields)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 10, value.updatedAt)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.createdAt)
        if (value.userProfile != null) UserProfile.ADAPTER.encodeWithTag(writer, 8,
            value.userProfile)
        Permissions.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.permissions)
        if (value.tempToken != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.tempToken)
        if (value.accountVerified != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5,
            value.accountVerified)
        if (value.hashedPassword != "") ProtoAdapter.STRING.encodeWithTag(writer, 4,
            value.hashedPassword)
        if (value.username != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.username)
        if (value.email != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.email)
        if (value.accountId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.accountId)
      }

      override fun decode(reader: ProtoReader): UserAccount {
        var accountId: String = ""
        var email: String = ""
        var username: String = ""
        var hashedPassword: String = ""
        var accountVerified: Boolean = false
        var tempToken: String = ""
        val permissions = mutableListOf<Permissions>()
        var userProfile: UserProfile? = null
        var createdAt: String = ""
        var updatedAt: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> accountId = ProtoAdapter.STRING.decode(reader)
            2 -> email = ProtoAdapter.STRING.decode(reader)
            3 -> username = ProtoAdapter.STRING.decode(reader)
            4 -> hashedPassword = ProtoAdapter.STRING.decode(reader)
            5 -> accountVerified = ProtoAdapter.BOOL.decode(reader)
            6 -> tempToken = ProtoAdapter.STRING.decode(reader)
            7 -> permissions.add(Permissions.ADAPTER.decode(reader))
            8 -> userProfile = UserProfile.ADAPTER.decode(reader)
            9 -> createdAt = ProtoAdapter.STRING.decode(reader)
            10 -> updatedAt = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return UserAccount(
          accountId = accountId,
          email = email,
          username = username,
          hashedPassword = hashedPassword,
          accountVerified = accountVerified,
          tempToken = tempToken,
          permissions = permissions,
          userProfile = userProfile,
          createdAt = createdAt,
          updatedAt = updatedAt,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: UserAccount): UserAccount = value.copy(
        permissions = value.permissions.redactElements(Permissions.ADAPTER),
        userProfile = value.userProfile?.let(UserProfile.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
