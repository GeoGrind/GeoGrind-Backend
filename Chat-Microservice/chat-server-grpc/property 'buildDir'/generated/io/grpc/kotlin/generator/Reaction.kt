// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.Reaction in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class Reaction(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val reactionId: String = "",
  @field:WireField(
    tag = 2,
    adapter = "io.grpc.kotlin.generator.Messages#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val message: Messages? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val createdAt: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val updatedAt: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Reaction, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Reaction) return false
    if (unknownFields != other.unknownFields) return false
    if (reactionId != other.reactionId) return false
    if (message != other.message) return false
    if (createdAt != other.createdAt) return false
    if (updatedAt != other.updatedAt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + reactionId.hashCode()
      result = result * 37 + (message?.hashCode() ?: 0)
      result = result * 37 + createdAt.hashCode()
      result = result * 37 + updatedAt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """reactionId=${sanitize(reactionId)}"""
    if (message != null) result += """message=$message"""
    result += """createdAt=${sanitize(createdAt)}"""
    result += """updatedAt=${sanitize(updatedAt)}"""
    return result.joinToString(prefix = "Reaction{", separator = ", ", postfix = "}")
  }

  public fun copy(
    reactionId: String = this.reactionId,
    message: Messages? = this.message,
    createdAt: String = this.createdAt,
    updatedAt: String = this.updatedAt,
    unknownFields: ByteString = this.unknownFields,
  ): Reaction = Reaction(reactionId, message, createdAt, updatedAt, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Reaction> = object : ProtoAdapter<Reaction>(
      FieldEncoding.LENGTH_DELIMITED, 
      Reaction::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.Reaction", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: Reaction): Int {
        var size = value.unknownFields.size
        if (value.reactionId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.reactionId)
        if (value.message != null) size += Messages.ADAPTER.encodedSizeWithTag(2, value.message)
        if (value.createdAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.createdAt)
        if (value.updatedAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.updatedAt)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Reaction) {
        if (value.reactionId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.reactionId)
        if (value.message != null) Messages.ADAPTER.encodeWithTag(writer, 2, value.message)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.createdAt)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.updatedAt)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Reaction) {
        writer.writeBytes(value.unknownFields)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.updatedAt)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.createdAt)
        if (value.message != null) Messages.ADAPTER.encodeWithTag(writer, 2, value.message)
        if (value.reactionId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.reactionId)
      }

      override fun decode(reader: ProtoReader): Reaction {
        var reactionId: String = ""
        var message: Messages? = null
        var createdAt: String = ""
        var updatedAt: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> reactionId = ProtoAdapter.STRING.decode(reader)
            2 -> message = Messages.ADAPTER.decode(reader)
            3 -> createdAt = ProtoAdapter.STRING.decode(reader)
            4 -> updatedAt = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Reaction(
          reactionId = reactionId,
          message = message,
          createdAt = createdAt,
          updatedAt = updatedAt,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Reaction): Reaction = value.copy(
        message = value.message?.let(Messages.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public enum class reactionType(
    override val `value`: Int,
  ) : WireEnum {
    SMILE(0),
    SMIRK(1),
    SAD(2),
    CRY(3),
    LAUGH(4),
    ROCK(5),
    PAPER(6),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<reactionType> = object : EnumAdapter<reactionType>(
        reactionType::class, 
        PROTO_3, 
        reactionType.SMILE
      ) {
        override fun fromValue(`value`: Int): reactionType? = reactionType.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): reactionType? = when (value) {
        0 -> SMILE
        1 -> SMIRK
        2 -> SAD
        3 -> CRY
        4 -> LAUGH
        5 -> ROCK
        6 -> PAPER
        else -> null
      }
    }
  }
}
