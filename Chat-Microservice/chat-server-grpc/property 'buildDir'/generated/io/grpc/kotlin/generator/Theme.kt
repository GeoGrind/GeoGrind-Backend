// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.Theme in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.JvmStatic
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class Theme(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val themeId: String = "",
  @field:WireField(
    tag = 2,
    adapter = "io.grpc.kotlin.generator.ChatRoom#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val chatRoom: ChatRoom? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val themeDescription: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val createdAt: String = "",
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val updatedAt: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Theme, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Theme) return false
    if (unknownFields != other.unknownFields) return false
    if (themeId != other.themeId) return false
    if (chatRoom != other.chatRoom) return false
    if (themeDescription != other.themeDescription) return false
    if (createdAt != other.createdAt) return false
    if (updatedAt != other.updatedAt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + themeId.hashCode()
      result = result * 37 + (chatRoom?.hashCode() ?: 0)
      result = result * 37 + themeDescription.hashCode()
      result = result * 37 + createdAt.hashCode()
      result = result * 37 + updatedAt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """themeId=${sanitize(themeId)}"""
    if (chatRoom != null) result += """chatRoom=$chatRoom"""
    result += """themeDescription=${sanitize(themeDescription)}"""
    result += """createdAt=${sanitize(createdAt)}"""
    result += """updatedAt=${sanitize(updatedAt)}"""
    return result.joinToString(prefix = "Theme{", separator = ", ", postfix = "}")
  }

  public fun copy(
    themeId: String = this.themeId,
    chatRoom: ChatRoom? = this.chatRoom,
    themeDescription: String = this.themeDescription,
    createdAt: String = this.createdAt,
    updatedAt: String = this.updatedAt,
    unknownFields: ByteString = this.unknownFields,
  ): Theme = Theme(themeId, chatRoom, themeDescription, createdAt, updatedAt, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Theme> = object : ProtoAdapter<Theme>(
      FieldEncoding.LENGTH_DELIMITED, 
      Theme::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.Theme", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: Theme): Int {
        var size = value.unknownFields.size
        if (value.themeId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.themeId)
        if (value.chatRoom != null) size += ChatRoom.ADAPTER.encodedSizeWithTag(2, value.chatRoom)
        if (value.themeDescription != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.themeDescription)
        if (value.createdAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.createdAt)
        if (value.updatedAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5,
            value.updatedAt)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Theme) {
        if (value.themeId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.themeId)
        if (value.chatRoom != null) ChatRoom.ADAPTER.encodeWithTag(writer, 2, value.chatRoom)
        if (value.themeDescription != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.themeDescription)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.createdAt)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.updatedAt)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Theme) {
        writer.writeBytes(value.unknownFields)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.updatedAt)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.createdAt)
        if (value.themeDescription != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.themeDescription)
        if (value.chatRoom != null) ChatRoom.ADAPTER.encodeWithTag(writer, 2, value.chatRoom)
        if (value.themeId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.themeId)
      }

      override fun decode(reader: ProtoReader): Theme {
        var themeId: String = ""
        var chatRoom: ChatRoom? = null
        var themeDescription: String = ""
        var createdAt: String = ""
        var updatedAt: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> themeId = ProtoAdapter.STRING.decode(reader)
            2 -> chatRoom = ChatRoom.ADAPTER.decode(reader)
            3 -> themeDescription = ProtoAdapter.STRING.decode(reader)
            4 -> createdAt = ProtoAdapter.STRING.decode(reader)
            5 -> updatedAt = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Theme(
          themeId = themeId,
          chatRoom = chatRoom,
          themeDescription = themeDescription,
          createdAt = createdAt,
          updatedAt = updatedAt,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Theme): Theme = value.copy(
        chatRoom = value.chatRoom?.let(ChatRoom.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public enum class themeType(
    override val `value`: Int,
  ) : WireEnum {
    Football(0),
    Wonka(1),
    Hanukkah(2),
    LouisVuitton(3),
    Christmas(4),
    Pizza(5),
    Wish(6),
    Trolls(7),
    TheMarvels(8),
    OnePiece(9),
    Avocado(10),
    Loki(11),
    Rustle(12),
    Pride(13),
    NonBinary(14),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<themeType> = object : EnumAdapter<themeType>(
        themeType::class, 
        PROTO_3, 
        themeType.Football
      ) {
        override fun fromValue(`value`: Int): themeType? = themeType.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): themeType? = when (value) {
        0 -> Football
        1 -> Wonka
        2 -> Hanukkah
        3 -> LouisVuitton
        4 -> Christmas
        5 -> Pizza
        6 -> Wish
        7 -> Trolls
        8 -> TheMarvels
        9 -> OnePiece
        10 -> Avocado
        11 -> Loki
        12 -> Rustle
        13 -> Pride
        14 -> NonBinary
        else -> null
      }
    }
  }
}
