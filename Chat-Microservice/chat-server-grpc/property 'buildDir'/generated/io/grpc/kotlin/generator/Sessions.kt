// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.Sessions in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class Sessions(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val sessionId: String = "",
  @field:WireField(
    tag = 2,
    adapter = "io.grpc.kotlin.generator.Courses#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val course: Courses? = null,
  @field:WireField(
    tag = 3,
    adapter = "io.grpc.kotlin.generator.UserProfile#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val userProfile: UserProfile? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val startTime: Long = 0L,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val numberOfLikers: Int = 0,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val stopTime: Long = 0L,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val description: String = "",
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val createdAt: String = "",
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 8,
  )
  public val updatedAt: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Sessions, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Sessions) return false
    if (unknownFields != other.unknownFields) return false
    if (sessionId != other.sessionId) return false
    if (course != other.course) return false
    if (userProfile != other.userProfile) return false
    if (startTime != other.startTime) return false
    if (numberOfLikers != other.numberOfLikers) return false
    if (stopTime != other.stopTime) return false
    if (description != other.description) return false
    if (createdAt != other.createdAt) return false
    if (updatedAt != other.updatedAt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + sessionId.hashCode()
      result = result * 37 + (course?.hashCode() ?: 0)
      result = result * 37 + (userProfile?.hashCode() ?: 0)
      result = result * 37 + startTime.hashCode()
      result = result * 37 + numberOfLikers.hashCode()
      result = result * 37 + stopTime.hashCode()
      result = result * 37 + description.hashCode()
      result = result * 37 + createdAt.hashCode()
      result = result * 37 + updatedAt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """sessionId=${sanitize(sessionId)}"""
    if (course != null) result += """course=$course"""
    if (userProfile != null) result += """userProfile=$userProfile"""
    result += """startTime=$startTime"""
    result += """numberOfLikers=$numberOfLikers"""
    result += """stopTime=$stopTime"""
    result += """description=${sanitize(description)}"""
    result += """createdAt=${sanitize(createdAt)}"""
    result += """updatedAt=${sanitize(updatedAt)}"""
    return result.joinToString(prefix = "Sessions{", separator = ", ", postfix = "}")
  }

  public fun copy(
    sessionId: String = this.sessionId,
    course: Courses? = this.course,
    userProfile: UserProfile? = this.userProfile,
    startTime: Long = this.startTime,
    numberOfLikers: Int = this.numberOfLikers,
    stopTime: Long = this.stopTime,
    description: String = this.description,
    createdAt: String = this.createdAt,
    updatedAt: String = this.updatedAt,
    unknownFields: ByteString = this.unknownFields,
  ): Sessions = Sessions(sessionId, course, userProfile, startTime, numberOfLikers, stopTime,
      description, createdAt, updatedAt, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Sessions> = object : ProtoAdapter<Sessions>(
      FieldEncoding.LENGTH_DELIMITED, 
      Sessions::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.Sessions", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: Sessions): Int {
        var size = value.unknownFields.size
        if (value.sessionId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.sessionId)
        if (value.course != null) size += Courses.ADAPTER.encodedSizeWithTag(2, value.course)
        if (value.userProfile != null) size += UserProfile.ADAPTER.encodedSizeWithTag(3,
            value.userProfile)
        if (value.startTime != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4, value.startTime)
        if (value.numberOfLikers != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(5,
            value.numberOfLikers)
        if (value.stopTime != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(6, value.stopTime)
        if (value.description != "") size += ProtoAdapter.STRING.encodedSizeWithTag(7,
            value.description)
        if (value.createdAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(8,
            value.createdAt)
        if (value.updatedAt != "") size += ProtoAdapter.STRING.encodedSizeWithTag(9,
            value.updatedAt)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Sessions) {
        if (value.sessionId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.sessionId)
        if (value.course != null) Courses.ADAPTER.encodeWithTag(writer, 2, value.course)
        if (value.userProfile != null) UserProfile.ADAPTER.encodeWithTag(writer, 3,
            value.userProfile)
        if (value.startTime != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.startTime)
        if (value.numberOfLikers != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5,
            value.numberOfLikers)
        if (value.stopTime != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.stopTime)
        if (value.description != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.description)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 8, value.createdAt)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.updatedAt)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Sessions) {
        writer.writeBytes(value.unknownFields)
        if (value.updatedAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.updatedAt)
        if (value.createdAt != "") ProtoAdapter.STRING.encodeWithTag(writer, 8, value.createdAt)
        if (value.description != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.description)
        if (value.stopTime != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.stopTime)
        if (value.numberOfLikers != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5,
            value.numberOfLikers)
        if (value.startTime != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.startTime)
        if (value.userProfile != null) UserProfile.ADAPTER.encodeWithTag(writer, 3,
            value.userProfile)
        if (value.course != null) Courses.ADAPTER.encodeWithTag(writer, 2, value.course)
        if (value.sessionId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.sessionId)
      }

      override fun decode(reader: ProtoReader): Sessions {
        var sessionId: String = ""
        var course: Courses? = null
        var userProfile: UserProfile? = null
        var startTime: Long = 0L
        var numberOfLikers: Int = 0
        var stopTime: Long = 0L
        var description: String = ""
        var createdAt: String = ""
        var updatedAt: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> sessionId = ProtoAdapter.STRING.decode(reader)
            2 -> course = Courses.ADAPTER.decode(reader)
            3 -> userProfile = UserProfile.ADAPTER.decode(reader)
            4 -> startTime = ProtoAdapter.INT64.decode(reader)
            5 -> numberOfLikers = ProtoAdapter.INT32.decode(reader)
            6 -> stopTime = ProtoAdapter.INT64.decode(reader)
            7 -> description = ProtoAdapter.STRING.decode(reader)
            8 -> createdAt = ProtoAdapter.STRING.decode(reader)
            9 -> updatedAt = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Sessions(
          sessionId = sessionId,
          course = course,
          userProfile = userProfile,
          startTime = startTime,
          numberOfLikers = numberOfLikers,
          stopTime = stopTime,
          description = description,
          createdAt = createdAt,
          updatedAt = updatedAt,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Sessions): Sessions = value.copy(
        course = value.course?.let(Courses.ADAPTER::redact),
        userProfile = value.userProfile?.let(UserProfile.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
