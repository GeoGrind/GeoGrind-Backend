// Code generated by Wire protocol buffer compiler, do not edit.
// Source: io.grpc.kotlin.generator.UpdateChatRoomByIdRequest in io/grpc/kotlin/generator/chat.proto
package io.grpc.kotlin.generator

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

public class UpdateChatRoomByIdRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val chatRoomId: String = "",
  @field:WireField(
    tag = 2,
    adapter = "io.grpc.kotlin.generator.Theme#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val updateChatRoomTheme: Theme? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val updateChatRoomDescription: String = "",
  updateChatRoomOwners: List<UserProfile> = emptyList(),
  updateChatRoomMembers: List<UserProfile> = emptyList(),
  updateChatRoomMessages: List<Messages> = emptyList(),
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val updateChatRoomName: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<UpdateChatRoomByIdRequest, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 4,
    adapter = "io.grpc.kotlin.generator.UserProfile#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 3,
  )
  public val updateChatRoomOwners: List<UserProfile> = immutableCopyOf("updateChatRoomOwners",
      updateChatRoomOwners)

  @field:WireField(
    tag = 5,
    adapter = "io.grpc.kotlin.generator.UserProfile#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 4,
  )
  public val updateChatRoomMembers: List<UserProfile> = immutableCopyOf("updateChatRoomMembers",
      updateChatRoomMembers)

  @field:WireField(
    tag = 6,
    adapter = "io.grpc.kotlin.generator.Messages#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 5,
  )
  public val updateChatRoomMessages: List<Messages> = immutableCopyOf("updateChatRoomMessages",
      updateChatRoomMessages)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is UpdateChatRoomByIdRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (chatRoomId != other.chatRoomId) return false
    if (updateChatRoomTheme != other.updateChatRoomTheme) return false
    if (updateChatRoomDescription != other.updateChatRoomDescription) return false
    if (updateChatRoomOwners != other.updateChatRoomOwners) return false
    if (updateChatRoomMembers != other.updateChatRoomMembers) return false
    if (updateChatRoomMessages != other.updateChatRoomMessages) return false
    if (updateChatRoomName != other.updateChatRoomName) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + chatRoomId.hashCode()
      result = result * 37 + (updateChatRoomTheme?.hashCode() ?: 0)
      result = result * 37 + updateChatRoomDescription.hashCode()
      result = result * 37 + updateChatRoomOwners.hashCode()
      result = result * 37 + updateChatRoomMembers.hashCode()
      result = result * 37 + updateChatRoomMessages.hashCode()
      result = result * 37 + updateChatRoomName.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """chatRoomId=${sanitize(chatRoomId)}"""
    if (updateChatRoomTheme != null) result += """updateChatRoomTheme=$updateChatRoomTheme"""
    result += """updateChatRoomDescription=${sanitize(updateChatRoomDescription)}"""
    if (updateChatRoomOwners.isNotEmpty()) result +=
        """updateChatRoomOwners=$updateChatRoomOwners"""
    if (updateChatRoomMembers.isNotEmpty()) result +=
        """updateChatRoomMembers=$updateChatRoomMembers"""
    if (updateChatRoomMessages.isNotEmpty()) result +=
        """updateChatRoomMessages=$updateChatRoomMessages"""
    result += """updateChatRoomName=${sanitize(updateChatRoomName)}"""
    return result.joinToString(prefix = "UpdateChatRoomByIdRequest{", separator = ", ", postfix =
        "}")
  }

  public fun copy(
    chatRoomId: String = this.chatRoomId,
    updateChatRoomTheme: Theme? = this.updateChatRoomTheme,
    updateChatRoomDescription: String = this.updateChatRoomDescription,
    updateChatRoomOwners: List<UserProfile> = this.updateChatRoomOwners,
    updateChatRoomMembers: List<UserProfile> = this.updateChatRoomMembers,
    updateChatRoomMessages: List<Messages> = this.updateChatRoomMessages,
    updateChatRoomName: String = this.updateChatRoomName,
    unknownFields: ByteString = this.unknownFields,
  ): UpdateChatRoomByIdRequest = UpdateChatRoomByIdRequest(chatRoomId, updateChatRoomTheme,
      updateChatRoomDescription, updateChatRoomOwners, updateChatRoomMembers,
      updateChatRoomMessages, updateChatRoomName, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<UpdateChatRoomByIdRequest> = object :
        ProtoAdapter<UpdateChatRoomByIdRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      UpdateChatRoomByIdRequest::class, 
      "type.googleapis.com/io.grpc.kotlin.generator.UpdateChatRoomByIdRequest", 
      PROTO_3, 
      null, 
      "io/grpc/kotlin/generator/chat.proto"
    ) {
      override fun encodedSize(`value`: UpdateChatRoomByIdRequest): Int {
        var size = value.unknownFields.size
        if (value.chatRoomId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.chatRoomId)
        if (value.updateChatRoomTheme != null) size += Theme.ADAPTER.encodedSizeWithTag(2,
            value.updateChatRoomTheme)
        if (value.updateChatRoomDescription != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.updateChatRoomDescription)
        size += UserProfile.ADAPTER.asRepeated().encodedSizeWithTag(4, value.updateChatRoomOwners)
        size += UserProfile.ADAPTER.asRepeated().encodedSizeWithTag(5, value.updateChatRoomMembers)
        size += Messages.ADAPTER.asRepeated().encodedSizeWithTag(6, value.updateChatRoomMessages)
        if (value.updateChatRoomName != "") size += ProtoAdapter.STRING.encodedSizeWithTag(7,
            value.updateChatRoomName)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: UpdateChatRoomByIdRequest) {
        if (value.chatRoomId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.chatRoomId)
        if (value.updateChatRoomTheme != null) Theme.ADAPTER.encodeWithTag(writer, 2,
            value.updateChatRoomTheme)
        if (value.updateChatRoomDescription != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.updateChatRoomDescription)
        UserProfile.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.updateChatRoomOwners)
        UserProfile.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.updateChatRoomMembers)
        Messages.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.updateChatRoomMessages)
        if (value.updateChatRoomName != "") ProtoAdapter.STRING.encodeWithTag(writer, 7,
            value.updateChatRoomName)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: UpdateChatRoomByIdRequest) {
        writer.writeBytes(value.unknownFields)
        if (value.updateChatRoomName != "") ProtoAdapter.STRING.encodeWithTag(writer, 7,
            value.updateChatRoomName)
        Messages.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.updateChatRoomMessages)
        UserProfile.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.updateChatRoomMembers)
        UserProfile.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.updateChatRoomOwners)
        if (value.updateChatRoomDescription != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.updateChatRoomDescription)
        if (value.updateChatRoomTheme != null) Theme.ADAPTER.encodeWithTag(writer, 2,
            value.updateChatRoomTheme)
        if (value.chatRoomId != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.chatRoomId)
      }

      override fun decode(reader: ProtoReader): UpdateChatRoomByIdRequest {
        var chatRoomId: String = ""
        var updateChatRoomTheme: Theme? = null
        var updateChatRoomDescription: String = ""
        val updateChatRoomOwners = mutableListOf<UserProfile>()
        val updateChatRoomMembers = mutableListOf<UserProfile>()
        val updateChatRoomMessages = mutableListOf<Messages>()
        var updateChatRoomName: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> chatRoomId = ProtoAdapter.STRING.decode(reader)
            2 -> updateChatRoomTheme = Theme.ADAPTER.decode(reader)
            3 -> updateChatRoomDescription = ProtoAdapter.STRING.decode(reader)
            4 -> updateChatRoomOwners.add(UserProfile.ADAPTER.decode(reader))
            5 -> updateChatRoomMembers.add(UserProfile.ADAPTER.decode(reader))
            6 -> updateChatRoomMessages.add(Messages.ADAPTER.decode(reader))
            7 -> updateChatRoomName = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return UpdateChatRoomByIdRequest(
          chatRoomId = chatRoomId,
          updateChatRoomTheme = updateChatRoomTheme,
          updateChatRoomDescription = updateChatRoomDescription,
          updateChatRoomOwners = updateChatRoomOwners,
          updateChatRoomMembers = updateChatRoomMembers,
          updateChatRoomMessages = updateChatRoomMessages,
          updateChatRoomName = updateChatRoomName,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: UpdateChatRoomByIdRequest): UpdateChatRoomByIdRequest =
          value.copy(
        updateChatRoomTheme = value.updateChatRoomTheme?.let(Theme.ADAPTER::redact),
        updateChatRoomOwners = value.updateChatRoomOwners.redactElements(UserProfile.ADAPTER),
        updateChatRoomMembers = value.updateChatRoomMembers.redactElements(UserProfile.ADAPTER),
        updateChatRoomMessages = value.updateChatRoomMessages.redactElements(Messages.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
